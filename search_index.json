[["index.html", "SAS and R Chapter 1 Welcome", " SAS and R Bayer Oncology SBU Chapter 1 Welcome The intent of this resource is to act as a knowledge hub for using R in a clinical study context. As our industry begins to embrace open-source languages like R, the need to replicate common analysis and reporting tasks or workflows is crucial to productivity. We appreciate that learning a new language can be challenging. Therefore, we aim to make the transition to R as effortless as possible by providing concrete examples relevant to clinical study programming. All code snippets in this resource can be used independently, they just need to be adjusted to your data. Basic familiarity with R is assumed. This resource is likely not to be exhaustive as we see it more as a living document for which we encourage cross-industry collaboration. If you would suggest any content be added or amended, or have questions or feedback, we kindly request that you open an issue. The current maintainer is Siqi Zhang. "],["about.html", "Chapter 2 About", " Chapter 2 About Learn more about this resource’s design, philosophy and how to contribute. "],["organization.html", "2.1 Organization", " 2.1 Organization The SAS and R catalog is structured as following: 2.1.1 First Steps This section gives an introduction to basic R concepts and draws parallels between the respective SAS PROC(s). If you are already familiar with R, feel free to skip it or come back later. All basic concepts are linked to the more complex code examples later on in the book so that you can quickly jump forth and back in case you would like to look up something. \\(\\rightarrow\\) First Steps 2.1.2 Data This section consists of various code examples for reading data from internal and external sources into R. \\(\\rightarrow\\) Data 2.1.3 Tables This section introduces techniques for creating, displaying and exporting tables in R. \\(\\rightarrow\\) Tables 2.1.4 Plots This section is dedicated to creating data visualizations used in clinical studies reporting. \\(\\rightarrow\\) Plots 2.1.5 Packages Below are a list of package and package versions used in the various examples in this book. Package Version broom 0.8.0 dplyr 1.0.9 flextable 0.7.1 forcats 0.5.1 gg.gap 1.3 ggplot2 3.3.6 ggrepel 0.9.1 haven 2.5.0 kableExtra 1.3.4 officer 0.4.2 purrr 0.3.4 readr 2.1.2 stringr 1.4.0 survival 3.1-12 survival 3.2-10 swimplot 1.2.0 tibble 3.1.7 tidyr 1.2.0 Tplyr 0.4.4 "],["house-keeping.html", "2.2 House Keeping", " 2.2 House Keeping This section describes general house keeping for the SAS and R Catalog 2.2.1 Philosophy We aim to provide a gentle, yet thorough introduction to clinical computing in R for SAS programmers. We appreciate learning a new language can be daunting and time consuming, so with this in mind, we strive to make this process as smooth as possible. Learning a new language is more of a journey than it is a task, and requires courage and practice. Our hope is that this catalog will help guide you through that journey! 2.2.2 Approach Concepts: When introducing a new concept, we will first demonstrate it using the minimal code required. Once a concept is clear, we will show you how to extend the code to meet your own needs. Coding: Throughout the examples, we aim to use the Tidyverse where possible. This is an excellent framework for our daily programming tasks that is consistent and easy to understand. As our catalog grows, we also recommend the use of pharmaverse packages which are relevant to clinical and pharmaceutical specific tasks. Code Snippets: Our code snippets aim to be self-contained. That means that you should be able to simply copy and paste code examples and reproduce the result on your machine. 2.2.3 Contributing New contents are welcome. If you are interested in contributing, please see CONTRIBUTING.md Thanks to the following contributors: Clara Beck Matthew Kumar Kangjie Zhang Robert Adams "],["first-steps-in-r.html", "Chapter 3 First Steps in R", " Chapter 3 First Steps in R In this chapter, you can find the basics of data wrangling in R for transforming, cleaning and exploring your data. Please take a look at this wonderful SAS2R cheat sheet created by Brendan O’Dowd. This one and many more cheat sheets can be found on the RStudio website: "],["r-and-sas-syntax.html", "3.1 R and SAS Syntax", " 3.1 R and SAS Syntax Below are some examples that use adsl to show how common operations are done in SAS and R. 3.1.1 Packages and Sample Data # Data adam_path &lt;- &quot;https://github.com/phuse-org/TestDataFactory/raw/main/Updated/TDF_ADaM/&quot; adsl &lt;- haven::read_xpt(paste0(adam_path, &quot;adsl.xpt&quot;)) # Select a few variables adsl &lt;- adsl %&gt;% dplyr::select(STUDYID, USUBJID, SUBJID, AGE, TRT01P, TRTSDT, TRTEDT, RACE, SEX, DISCONFL) 3.1.2 PROC CONTENTS \\(\\rightarrow\\) summary() To explore the variables of your dataset you can use PROC contents in SAS: proc contents data = adsl; run; In R, you can use str() and summary() instead: str(adsl) ## tibble [254 × 10] (S3: tbl_df/tbl/data.frame) ## $ STUDYID : chr [1:254] &quot;CDISCPILOT01&quot; &quot;CDISCPILOT01&quot; &quot;CDISCPILOT01&quot; &quot;CDISCPILOT01&quot; ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Study Identifier&quot; ## $ USUBJID : chr [1:254] &quot;01-701-1015&quot; &quot;01-701-1023&quot; &quot;01-701-1028&quot; &quot;01-701-1033&quot; ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Unique Subject Identifier&quot; ## $ SUBJID : chr [1:254] &quot;1015&quot; &quot;1023&quot; &quot;1028&quot; &quot;1033&quot; ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Subject Identifier for the Study&quot; ## $ AGE : num [1:254] 63 64 71 74 77 85 68 81 84 52 ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Age&quot; ## $ TRT01P : chr [1:254] &quot;Placebo&quot; &quot;Placebo&quot; &quot;Xanomeline High Dose&quot; &quot;Xanomeline Low Dose&quot; ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Planned Treatment for Period 01&quot; ## $ TRTSDT : Date[1:254], format: &quot;2014-01-02&quot; &quot;2012-08-05&quot; ... ## $ TRTEDT : Date[1:254], format: &quot;2014-07-02&quot; &quot;2012-09-01&quot; ... ## $ RACE : chr [1:254] &quot;WHITE&quot; &quot;WHITE&quot; &quot;WHITE&quot; &quot;WHITE&quot; ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Race&quot; ## $ SEX : chr [1:254] &quot;F&quot; &quot;M&quot; &quot;M&quot; &quot;M&quot; ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Sex&quot; ## $ DISCONFL: chr [1:254] &quot;&quot; &quot;Y&quot; &quot;&quot; &quot;Y&quot; ... ## ..- attr(*, &quot;label&quot;)= chr &quot;Did the Subject Discontinue the Study?&quot; summary(adsl) ## STUDYID USUBJID SUBJID AGE ## Length:254 Length:254 Length:254 Min. :51.00 ## Class :character Class :character Class :character 1st Qu.:70.00 ## Mode :character Mode :character Mode :character Median :77.00 ## Mean :75.09 ## 3rd Qu.:81.00 ## Max. :89.00 ## TRT01P TRTSDT TRTEDT ## Length:254 Min. :2012-07-09 Min. :2012-08-28 ## Class :character 1st Qu.:2013-01-26 1st Qu.:2013-05-12 ## Mode :character Median :2013-06-13 Median :2013-09-27 ## Mean :2013-06-17 Mean :2013-10-10 ## 3rd Qu.:2013-11-07 3rd Qu.:2014-03-15 ## Max. :2014-09-02 Max. :2015-03-05 ## RACE SEX DISCONFL ## Length:254 Length:254 Length:254 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## 3.1.3 PROC FREQ \\(\\rightarrow\\) count() In order to get the frequencies for one variables you use PROC FREQ in SAS. PROC FREQ data = adsl; TABLES SEX; RUN; And for cross tables: PROC FREQ data = adsl; TABLES SEX * TRT01P * RACE; RUN; In R we use table() or count() from the tidyverse package: For One Variable table(adsl$SEX) adsl %&gt;% count(SEX) ## ## F M ## 143 111 SEX n F 143 M 111 For Multiple Variables #for multiple variables table(adsl$SEX, adsl$TRT01P, adsl$RACE) adsl %&gt;% count(SEX, TRT01P, RACE) ## , , = AMERICAN INDIAN OR ALASKA NATIVE ## ## ## Placebo Xanomeline High Dose Xanomeline Low Dose ## F 0 0 0 ## M 0 1 0 ## ## , , = BLACK OR AFRICAN AMERICAN ## ## ## Placebo Xanomeline High Dose Xanomeline Low Dose ## F 5 6 6 ## M 3 3 0 ## ## , , = WHITE ## ## ## Placebo Xanomeline High Dose Xanomeline Low Dose ## F 48 34 44 ## M 30 40 34 SEX TRT01P RACE n F Placebo BLACK OR AFRICAN AMERICAN 5 F Placebo WHITE 48 F Xanomeline High Dose BLACK OR AFRICAN AMERICAN 6 F Xanomeline High Dose WHITE 34 F Xanomeline Low Dose BLACK OR AFRICAN AMERICAN 6 F Xanomeline Low Dose WHITE 44 M Placebo BLACK OR AFRICAN AMERICAN 3 M Placebo WHITE 30 M Xanomeline High Dose AMERICAN INDIAN OR ALASKA NATIVE 1 M Xanomeline High Dose BLACK OR AFRICAN AMERICAN 3 M Xanomeline High Dose WHITE 40 M Xanomeline Low Dose WHITE 34 3.1.4 KEEP/DROP \\(\\rightarrow\\) select() DATA adsl2; SET adsl; KEEP subjidn; *or drop subjidn; RUN; In R we use the select() function from the tidyverse package. # to keep (only) SUBJID adsl %&gt;% select(SUBJID) %&gt;% head() # keep only first 6 rows # to keep all variables except SUBJID adsl %&gt;% select(-SUBJID) %&gt;% head() SUBJID 1015 1023 1028 1033 1034 1047 STUDYID USUBJID AGE TRT01P TRTSDT TRTEDT RACE SEX DISCONFL CDISCPILOT01 01-701-1015 63 Placebo 2014-01-02 2014-07-02 WHITE F CDISCPILOT01 01-701-1023 64 Placebo 2012-08-05 2012-09-01 WHITE M Y CDISCPILOT01 01-701-1028 71 Xanomeline High Dose 2013-07-19 2014-01-14 WHITE M CDISCPILOT01 01-701-1033 74 Xanomeline Low Dose 2014-03-18 2014-03-31 WHITE M Y CDISCPILOT01 01-701-1034 77 Xanomeline High Dose 2014-07-01 2014-12-30 WHITE F CDISCPILOT01 01-701-1047 85 Placebo 2013-02-12 2013-03-09 WHITE F Y 3.1.5 Subsetting data (WHERE/IF) \\(\\rightarrow\\) filter() DATA female; SET adsl; WHERE SEX = &#39;F&#39;; RUN; adsl %&gt;% filter(SEX == &quot;F&quot;) %&gt;% head() # multiple conditions: adsl %&gt;% filter(SEX == &quot;F&quot; &amp; AGE &gt; 70) %&gt;% head() STUDYID USUBJID SUBJID AGE TRT01P TRTSDT TRTEDT RACE SEX DISCONFL CDISCPILOT01 01-701-1015 1015 63 Placebo 2014-01-02 2014-07-02 WHITE F CDISCPILOT01 01-701-1034 1034 77 Xanomeline High Dose 2014-07-01 2014-12-30 WHITE F CDISCPILOT01 01-701-1047 1047 85 Placebo 2013-02-12 2013-03-09 WHITE F Y CDISCPILOT01 01-701-1111 1111 81 Xanomeline Low Dose 2012-09-07 2012-09-16 WHITE F Y CDISCPILOT01 01-701-1133 1133 81 Xanomeline High Dose 2012-10-28 2013-04-28 WHITE F CDISCPILOT01 01-701-1146 1146 75 Xanomeline High Dose 2013-05-20 2013-06-26 WHITE F Y STUDYID USUBJID SUBJID AGE TRT01P TRTSDT TRTEDT RACE SEX DISCONFL CDISCPILOT01 01-701-1034 1034 77 Xanomeline High Dose 2014-07-01 2014-12-30 WHITE F CDISCPILOT01 01-701-1047 1047 85 Placebo 2013-02-12 2013-03-09 WHITE F Y CDISCPILOT01 01-701-1111 1111 81 Xanomeline Low Dose 2012-09-07 2012-09-16 WHITE F Y CDISCPILOT01 01-701-1133 1133 81 Xanomeline High Dose 2012-10-28 2013-04-28 WHITE F CDISCPILOT01 01-701-1146 1146 75 Xanomeline High Dose 2013-05-20 2013-06-26 WHITE F Y CDISCPILOT01 01-701-1153 1153 79 Placebo 2013-09-23 2014-03-16 WHITE F 3.1.6 Sorting data PROC SORT data=adsl out=adsl_sort_age; BY AGE; RUN; In R we use the arrange() function from tidyverse: # ascending adsl %&gt;% arrange(AGE)%&gt;% head() # descending adsl %&gt;% arrange(-AGE)%&gt;% head() STUDYID USUBJID SUBJID AGE TRT01P TRTSDT TRTEDT RACE SEX DISCONFL CDISCPILOT01 01-701-1341 1341 51 Xanomeline Low Dose 2013-01-05 2013-01-26 WHITE M Y CDISCPILOT01 01-701-1118 1118 52 Placebo 2014-03-12 2014-09-09 WHITE M CDISCPILOT01 01-709-1007 1007 54 Xanomeline Low Dose 2012-07-31 2012-08-28 WHITE F Y CDISCPILOT01 01-701-1180 1180 56 Xanomeline High Dose 2013-02-12 2013-03-18 WHITE M Y CDISCPILOT01 01-701-1239 1239 56 Xanomeline High Dose 2014-01-11 2014-07-10 WHITE M CDISCPILOT01 01-701-1287 1287 56 Xanomeline High Dose 2014-01-25 2014-07-26 WHITE F STUDYID USUBJID SUBJID AGE TRT01P TRTSDT TRTEDT RACE SEX DISCONFL CDISCPILOT01 01-710-1083 1083 89 Placebo 2013-07-22 2013-08-01 WHITE F Y CDISCPILOT01 01-703-1295 1295 88 Xanomeline High Dose 2013-11-21 2014-04-19 WHITE F Y CDISCPILOT01 01-710-1002 1002 88 Xanomeline Low Dose 2014-01-14 2014-01-18 WHITE M Y CDISCPILOT01 01-710-1368 1368 88 Placebo 2013-10-23 2014-04-24 WHITE F CDISCPILOT01 01-714-1035 1035 88 Placebo 2014-04-17 2014-10-16 WHITE F CDISCPILOT01 01-701-1387 1387 87 Placebo 2014-03-12 2014-03-25 WHITE F Y 3.1.7 Creating new variables DATA adsl; SET adsl; length AGEGR1 $20.; * length function in R means something different IF age &gt; 50 then AGEGR1 = ‘&gt; 50 years old’; ELSE if age &lt;= 50 then AGEGR1 = ‘&lt;= 50 years old’; run; In R we use the mutate() function: adsl %&gt;% mutate(AGEGR1 = case_when( AGE &gt; 50 ~&quot;&gt; 50 years old&quot;, AGE &lt;= 50 ~&quot;&lt;= 50 years old&quot;, )) %&gt;% head() STUDYID USUBJID SUBJID AGE TRT01P TRTSDT TRTEDT RACE SEX DISCONFL AGEGR1 CDISCPILOT01 01-701-1015 1015 63 Placebo 2014-01-02 2014-07-02 WHITE F &gt; 50 years old CDISCPILOT01 01-701-1023 1023 64 Placebo 2012-08-05 2012-09-01 WHITE M Y &gt; 50 years old CDISCPILOT01 01-701-1028 1028 71 Xanomeline High Dose 2013-07-19 2014-01-14 WHITE M &gt; 50 years old CDISCPILOT01 01-701-1033 1033 74 Xanomeline Low Dose 2014-03-18 2014-03-31 WHITE M Y &gt; 50 years old CDISCPILOT01 01-701-1034 1034 77 Xanomeline High Dose 2014-07-01 2014-12-30 WHITE F &gt; 50 years old CDISCPILOT01 01-701-1047 1047 85 Placebo 2013-02-12 2013-03-09 WHITE F Y &gt; 50 years old 3.1.8 Handling of missing values Missing values in SAS and R: SAS Missing value is a blank/a single decimal point for character/numeric variables, see details in Missing Values in SAS; R Missing data in R appears as NA. NA is not a string nor a numeric value, but an indicator of missingness, see detailed examples in Advanced R #3.2.3 Missing values; NA and \"\" are different in R: \"\" is a blank string, while NA is missing; “Missing values (NA) and NaN values are regarded as non-comparable even to themselves, so comparisons involving them will always result in NA” admiral::convert_blanks_to_na() can turn SAS blank strings into proper R NA (from admiral documentation). # Unlike SAS, space(s) != blank string in R, &quot; &quot; == &quot;&quot; ## [1] FALSE # is.na to check if it&#39;s missing c(&quot; &quot;, &quot;Y&quot;, NA_character_) %&gt;% is.na() ## [1] FALSE FALSE TRUE # NA is non-comparable, result in NA c(&quot; &quot;, &quot;Y&quot;, NA_character_) != &quot;Y&quot; ## [1] TRUE FALSE NA Unexpected results might occur with “SAS habits”, below are three examples to illustrate the different handling of missing values in R. 3.1.8.1 Subsetting data != is not the same in R when it involves NA # add one more row to the data with missing AGE and DISCONFL, select the first 3 rows adsl_na_example &lt;- adsl %&gt;% add_row(SUBJID = &quot;1&quot;, DISCONFL = NA_character_, .before = T) %&gt;% slice(1:3) %&gt;% select(SUBJID, DISCONFL) # demo data adsl_na_example SUBJID DISCONFL 1 NA 1015 1023 Y Subset to DISCONFL != \"Y\", only DISCONFL = \" \" is selected, not NA adsl_na_example %&gt;% filter(DISCONFL != &quot;Y&quot;) SUBJID DISCONFL 1015 To display NA, add is.na(DISCONFL) to the filter # include is.na(DISCONFL) in the filter adsl_na_example %&gt;% filter(DISCONFL != &quot;Y&quot; | is.na(DISCONFL)) SUBJID DISCONFL 1 NA 1015 3.1.8.2 Sorting data In SAS, missing is treated as the smallest value in proc sort; while in R, NA is always at the bottom after ascending or descending sorting. Create demo data # add one more row to the data with missing AGE and DISCONFL # select the first 3 rows adsl_na_sort &lt;- adsl %&gt;% add_row(SUBJID = &quot;1&quot;, AGE = NA_integer_, .before = T) %&gt;% slice(1:5) %&gt;% select(SUBJID, AGE) SUBJID AGE 1 NA 1015 63 1023 64 1028 71 1033 74 Sort by ascending order of AGE # ascending adsl_na_sort %&gt;% arrange(AGE) SUBJID AGE 1015 63 1023 64 1028 71 1033 74 1 NA Sort by descending order of AGE # descending adsl_na_sort %&gt;% arrange(-AGE) SUBJID AGE 1033 74 1028 71 1023 64 1015 63 1 NA NA can also be placed at the top with below workaround # to be consistent with SAS - NA at the top when ascending adsl_na_sort %&gt;% arrange(!is.na(AGE), AGE) SUBJID AGE 1 NA 1015 63 1023 64 1028 71 1033 74 3.1.8.3 Creating new variables When AGE is missing, AGEGR1 is set to ‘&lt;= 50 years old’ in SAS; while in R it is set to NA_character_. adsl_na_sort %&gt;% mutate(AGEGR1 = case_when( AGE &gt; 50 ~&quot;&gt; 50 years old&quot;, AGE &lt;= 50 ~&quot;&lt;= 50 years old&quot;, )) SUBJID AGE AGEGR1 1 NA NA 1015 63 &gt; 50 years old 1023 64 &gt; 50 years old 1028 71 &gt; 50 years old 1033 74 &gt; 50 years old 3.1.9 Merging Data We create another data set with weight information for some of the subjects: SUBJID &lt;- sample(adsl$SUBJID, 100, replace = FALSE) WEIGHT &lt;- sample(50:100, 100, replace = TRUE) adsl_weight &lt;- data.frame(SUBJID, WEIGHT) Now, we would like to join the weight column to our adsl data set. In SAS, we use the merge function: * inner join; data adsl_merge; merge adsl(in = inadsl) adsl_weight(in = inweight); by subjidn; if inadsl and inweight; * inner join in SAS run; * outer join; data adsl_merge_all; merge adsl(in = inadsl) adsl_weight(in = inweight); by subjidn; if inadsl or inweight; * default in SAS run; * left join; data adsl_merge_left; merge adsl(in = inadsl) adsl_weight(in = inweight); by subjidn; if inadsl; run; In R, we use again the tidyverse package: # inner join adsl%&gt;% inner_join(adsl_weight, by = &quot;SUBJID&quot;) # outer join adsl %&gt;% full_join(adsl_weight, by = &quot;SUBJID&quot;) # left join adsl %&gt;% left_join(adsl_weight, by = &quot;SUBJID&quot;) 3.1.10 Concatenating Data To demonstrate stacking or concatenating data sets, we can first split adsl into two parts, each having 5 records with the same columns in common. # first 5 records of adsl adsl_1 &lt;- adsl[c(1:5),] # the next 5 records of adsl adsl_2 &lt;- adsl[c(6:10),] In SAS, you could use the set command: DATA adsl_stacked; SET adsl_1 adsl_2; RUN; In R, you may accomplish this like so: # tidyverse method - bind_rows() adsl_stacked &lt;- adsl_1 %&gt;% bind_rows(adsl_2) "],["data-1.html", "Chapter 4 Data", " Chapter 4 Data In this section, we provide some ways to obtain and use data for learning purposes. We differentiate between external data (data from an outside source such as a file or web address) and internal data (data that already exists within R). "],["external-data.html", "4.1 External Data", " 4.1 External Data Data may be directly imported into the R environment using packages. Most often, data will take the form of Comma Separated Values (.csv), Excel Spreadsheets (.xlsx), SAS (.sas7bdat) or JSON (.json). Package Formats Reference readr .csv, .txt Cheat Sheet readxl .xls, .xlsx Cheat Sheet haven .sas7bdat, .sas7bcat, .xpt Package Site jsonlite .json Vignette 4.1.1 CDISC Datasets The PHUSE Test Datasets Factory provides a convenient set CDISC datasets in xpt format to experiment with. You may access them through the following github repositories: ADaM Data SDTM Data Below is an example of using the haven package to read in adsl.xpt directly from the ADaM repository. Note you can also chose to download these data and read them locally from your computer. library(haven) adsl &lt;- read_xpt(&quot;https://github.com/phuse-org/TestDataFactory/raw/main/Updated/TDF_ADaM/adsl.xpt&quot;) STUDYID USUBJID SUBJID SITEID SITEGR1 ARM TRT01P TRT01PN TRT01A TRT01AN TRTSDT TRTEDT TRTDURD AVGDD CUMDOSE AGE AGEGR1 AGEGR1N AGEU RACE RACEN SEX ETHNIC SAFFL ITTFL EFFFL COMP8FL COMP16FL COMP24FL DISCONFL DSRAEFL DTHFL BMIBL BMIBLGR1 HEIGHTBL WEIGHTBL EDUCLVL DISONSDT DURDIS DURDSGR1 VISIT1DT RFSTDTC RFENDTC VISNUMEN RFENDT DCDECOD EOSSTT DCSREAS MMSETOT CDISCPILOT01 01-701-1015 1015 701 701 Placebo Placebo 0 Placebo 0 2014-01-02 2014-07-02 182 0.0 0 63 &lt;65 1 YEARS WHITE 1 F HISPANIC OR LATINO Y Y Y Y Y Y 25.1 25-&lt;30 147.3 54.4 16 2010-04-30 43.9 =12 2013-12-26 2014-01-02 2014-07-02 12 2014-07-02 COMPLETED COMPLETED 23 CDISCPILOT01 01-701-1023 1023 701 701 Placebo Placebo 0 Placebo 0 2012-08-05 2012-09-01 28 0.0 0 64 &lt;65 1 YEARS WHITE 1 M HISPANIC OR LATINO Y Y Y N N N Y Y 30.4 =30 162.6 80.3 14 2006-03-11 76.4 =12 2012-07-22 2012-08-05 2012-09-02 5 2012-09-02 ADVERSE EVENT DISCONTINUED Adverse Event 23 CDISCPILOT01 01-701-1028 1028 701 701 Xanomeline High Dose Xanomeline High Dose 81 Xanomeline High Dose 81 2013-07-19 2014-01-14 180 77.7 13986 71 65-80 2 YEARS WHITE 1 M NOT HISPANIC OR LATINO Y Y Y Y Y Y 31.4 =30 177.8 99.3 16 2009-12-16 42.8 =12 2013-07-11 2013-07-19 2014-01-14 12 2014-01-14 COMPLETED COMPLETED 23 CDISCPILOT01 01-701-1033 1033 701 701 Xanomeline Low Dose Xanomeline Low Dose 54 Xanomeline Low Dose 54 2014-03-18 2014-03-31 14 54.0 756 74 65-80 2 YEARS WHITE 1 M NOT HISPANIC OR LATINO Y Y Y N N N Y 28.8 25-&lt;30 175.3 88.5 12 2009-08-02 55.3 =12 2014-03-10 2014-03-18 2014-04-14 5 2014-04-14 STUDY TERMINATED BY SPONSOR DISCONTINUED Sponsor Decision 23 CDISCPILOT01 01-701-1034 1034 701 701 Xanomeline High Dose Xanomeline High Dose 81 Xanomeline High Dose 81 2014-07-01 2014-12-30 183 76.9 14067 77 65-80 2 YEARS WHITE 1 F NOT HISPANIC OR LATINO Y Y Y Y Y Y 26.1 25-&lt;30 154.9 62.6 9 2011-09-29 32.9 =12 2014-06-24 2014-07-01 2014-12-30 12 2014-12-30 COMPLETED COMPLETED 21 "],["internal-data.html", "4.2 Internal Data", " 4.2 Internal Data Internal data sources include those that come bundled with R packages or data you create yourself. 4.2.1 Package Data The datasets package comes with your default installation of R and houses many example datasets you can utilize. Simply run the following to learn about the different ones included. library(help = &quot;datasets&quot;) Once you’ve made a selection, running the following will make that data available in your R session. # ToothGrowth looks interesting data(ToothGrowth) len supp dose 4.2 VC 0.5 11.5 VC 0.5 7.3 VC 0.5 5.8 VC 0.5 6.4 VC 0.5 Using package data is not just limited to the datasets package. Many specialized packages will make an effort to include some data to demonstrate how their functions work. For example, the admiral.test package has many of the SDTM datasets listed in the above repo. 4.2.2 Simulating Your Own In some cases you may wish to simulate your own data. You can do so quite easily using a combination of sample and r* functions built into R. Below is an example of simulating a few variables typically found in an ADSL dataset. my_sim_data &lt;- data.frame(subjidn = 1:10, sex = sample(c(&#39;M&#39;,&#39;F&#39;), 10, replace = TRUE), age = round(rnorm(10, mean = 30, sd = 5)), stringsAsFactors = FALSE ) subjidn sex age 1 M 38 2 F 38 3 F 25 4 F 32 5 M 34 "],["tables-1.html", "Chapter 5 Tables", " Chapter 5 Tables In this section, we use the Tplyr package to build a demographics table using a subject-level dataset. Exporting tables using the officer package is also covered. "],["building.html", "5.1 Building", " 5.1 Building 5.1.1 Dataset Source For demonstration purposes, we will use the adsl from the PHUSE Test Datasets Factory repository. library(haven) adsl &lt;- read_xpt(&quot;https://github.com/phuse-org/TestDataFactory/raw/main/Updated/TDF_ADaM/adsl.xpt&quot;) 5.1.2 String Formatting This section sets the default formats for tables built with Tplyr. For each variable type (continuous, categorical), we specify the following: Which summary statistic(s) should be computed? How should the summary statistic(s) be formatted for display? Once set, these formats are carried over to your table automatically. library(Tplyr) options( # Categorical variable defaults tplyr.count_layer_default_formats = list(n_counts = f_str(&quot;xxx [xx.xx%]&quot;, n, pct)), # Continuous variable defaults tplyr.desc_layer_default_formats = list(&#39;N&#39; = f_str(&#39;xx&#39;, n), &#39;Mean [SD]&#39; = f_str(&#39;xx.xx [xx.xxx]&#39;, mean, sd), &#39;Median&#39; = f_str(&#39;xx.x&#39;, median), &#39;Min, Max&#39; = f_str(&#39;xx, xx&#39;, min, max)) ) 5.1.3 Create For demonstration purposes, we will select a handful of variables from the adsl dataset to work with. library(dplyr) # Initiate Tplyr, specify treatment variable, optional where condition my_table &lt;- tplyr_table(adsl, TRT01P, where = SAFFL == &quot;Y&quot;) %&gt;% # Add a total group column add_total_group() %&gt;% # Add individual variables here add_layer(group_desc(AGE, b = &quot;Age (years)&quot;)) %&gt;% add_layer(group_count(AGEGR1, b = &quot;Age Group 1 (years)&quot;)) %&gt;% add_layer(group_count(SEX, b = &quot;Gender&quot;)) %&gt;% add_layer(group_count(ETHNIC, b = &quot;Ethnicity&quot;)) %&gt;% add_layer(group_desc(BMIBL, b = &quot;Baseline Body Mass Index (kg/m2)&quot;)) %&gt;% # Build build() "],["formatting.html", "5.2 Formatting", " 5.2 Formatting 5.2.1 Post Processing By default, Tplyr will build your table and store it as a tibble. It can be accessed directly in your environment by simply calling it. head(my_table, n = 9) ## # A tibble: 9 × 9 ## row_label1 row_label2 var1_Placebo var1_Total `var1_Xanomeli…` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Age (years) N &quot;86&quot; &quot;254&quot; &quot;84&quot; ## 2 Age (years) Mean [SD] &quot;75.21 [ 8.590]&quot; &quot;75.09 [ 8.2… &quot;74.38 [ 7.886]&quot; ## 3 Age (years) Median &quot;76.0&quot; &quot;77.0&quot; &quot;76.0&quot; ## 4 Age (years) Min, Max &quot;52, 89&quot; &quot;51, 89&quot; &quot;56, 88&quot; ## 5 Age Group 1 (years) &lt;65 &quot; 14 [16.28%]&quot; &quot; 33 [12.99%… &quot; 11 [13.10%]&quot; ## 6 Age Group 1 (years) &gt;80 &quot; 30 [34.88%]&quot; &quot; 77 [30.31%… &quot; 18 [21.43%]&quot; ## 7 Age Group 1 (years) 65-80 &quot; 42 [48.84%]&quot; &quot;144 [56.69%… &quot; 55 [65.48%]&quot; ## 8 Gender F &quot; 53 [61.63%]&quot; &quot;143 [56.30%… &quot; 40 [47.62%]&quot; ## 9 Gender M &quot; 33 [38.37%]&quot; &quot;111 [43.70%… &quot; 44 [52.38%]&quot; ## # … with 4 more variables: `var1_Xanomeline Low Dose` &lt;chr&gt;, ## # ord_layer_index &lt;int&gt;, ord_layer_1 &lt;int&gt;, ord_layer_2 &lt;dbl&gt; Since it is tibble, you are free to further process or wrangle it to your liking. Below we’ll apply some light formatting using a combination of Tplyr and dplyr: Remove repeating variable labels and insert breaks between variable rows Reorder the columns Remove extraneous columns not of interest for display (i.e. meta data created by Tplyr) library(dplyr) my_table &lt;- my_table %&gt;% # remove repeating labels apply_row_masks(., row_breaks = TRUE) %&gt;% # specify order of relevant variables select(row_label1, row_label2, `var1_Xanomeline High Dose`, `var1_Xanomeline Low Dose`, var1_Placebo, var1_Total) We can see the formatting has taken effect by recalling it in our environment. Specifically, compare the row_label1 variable below to the previous section while also noting the order of columns has changed to our specification. head(my_table, n = 9) ## # A tibble: 9 × 6 ## row_label1 row_label2 `var1_Xanomeli…` `var1_Xanomeli…` var1_Placebo ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &quot;Age (years)&quot; &quot;N&quot; &quot;84&quot; &quot;84&quot; &quot;86&quot; ## 2 &quot;&quot; &quot;Mean [SD… &quot;74.38 [ 7.886]&quot; &quot;75.67 [ 8.286]&quot; &quot;75.21 [ 8.… ## 3 &quot;&quot; &quot;Median&quot; &quot;76.0&quot; &quot;77.5&quot; &quot;76.0&quot; ## 4 &quot;&quot; &quot;Min, Max&quot; &quot;56, 88&quot; &quot;51, 88&quot; &quot;52, 89&quot; ## 5 &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## 6 &quot;Age Group 1 (years… &quot;&lt;65&quot; &quot; 11 [13.10%]&quot; &quot; 8 [ 9.52%]&quot; &quot; 14 [16.28… ## 7 &quot;&quot; &quot;&gt;80&quot; &quot; 18 [21.43%]&quot; &quot; 29 [34.52%]&quot; &quot; 30 [34.88… ## 8 &quot;&quot; &quot;65-80&quot; &quot; 55 [65.48%]&quot; &quot; 47 [55.95%]&quot; &quot; 42 [48.84… ## 9 &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## # … with 1 more variable: var1_Total &lt;chr&gt; 5.2.2 Displaying While Tplyr aided us in building a summary tables, other packages exist to help us display them. One package we will focus on is the flextable package. This table display package is quite powerful and offers a high degree of customization. We turn the interested reader to the flextable book to view additional examples. library(flextable) # a basic flextable my_flextable &lt;- my_table %&gt;% # start flextable flextable() %&gt;% autofit() my_flextable .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-94bb055c{}.cl-94b27e32{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-94b295d4{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-94b3a2b2{width:163.2pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2bc{width:210.4pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2c6{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2c7{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2c8{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2d0{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2d1{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2d2{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2d3{width:163.2pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2da{width:210.4pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2db{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2dc{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2e4{width:163.2pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2e5{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2e6{width:210.4pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2ee{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2ef{width:210.4pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2f0{width:163.2pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2f1{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2f8{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2f9{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a2fa{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a302{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a303{width:163.2pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a304{width:210.4pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a305{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a30c{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a30d{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a30e{width:210.4pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a30f{width:163.2pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a310{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a316{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a317{width:210.4pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a318{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a320{width:163.2pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a321{width:210.4pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a322{width:163.2pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a323{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a32a{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94b3a32b{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} row_label1row_label2var1_Xanomeline High Dosevar1_Xanomeline Low Dosevar1_Placebovar1_TotalAge (years)N848486254Mean [SD]74.38 [ 7.886]75.67 [ 8.286]75.21 [ 8.590]75.09 [ 8.246]Median76.077.576.077.0Min, Max56, 8851, 8852, 8951, 89Age Group 1 (years)&lt;65 11 [13.10%] 8 [ 9.52%] 14 [16.28%] 33 [12.99%]&gt;80 18 [21.43%] 29 [34.52%] 30 [34.88%] 77 [30.31%]65-80 55 [65.48%] 47 [55.95%] 42 [48.84%]144 [56.69%]GenderF 40 [47.62%] 50 [59.52%] 53 [61.63%]143 [56.30%]M 44 [52.38%] 34 [40.48%] 33 [38.37%]111 [43.70%]EthnicityHISPANIC OR LATINO 3 [ 3.57%] 6 [ 7.14%] 3 [ 3.49%] 12 [ 4.72%]NOT HISPANIC OR LATINO 81 [96.43%] 78 [92.86%] 83 [96.51%]242 [95.28%]Baseline Body Mass Index (kg/m2)N848486254Mean [SD]25.35 [ 4.158]25.06 [ 4.271]23.64 [ 3.672]24.67 [ 4.092]Median24.824.323.424.2Min, Max14, 3418, 4015, 3314, 40 We can apply some flextable formatting to alter the display of the table. # a nicer flextable my_flextable &lt;- my_table %&gt;% # start flextable flextable() %&gt;% autofit() %&gt;% # add some padding between rows padding(padding = 0.5) %&gt;% # adjust width of first two columns width(j = 1:2, width = 4) %&gt;% # align treatment columns to center align(part = &quot;all&quot;, align = &quot;center&quot;, j = 3:6) %&gt;% # column header labels set_header_labels(., values = list( row_label1 = &#39;Variable&#39;, row_label2 = &#39; &#39;, `var1_Xanomeline High Dose` = &#39;Xanomeline \\nHigh Dose&#39;, `var1_Xanomeline Low Dose` = &#39;Xanomeline \\nLow Dose&#39;, var1_Placebo = &#39;Placebo&#39;, var1_Total = &#39;Total&#39;)) %&gt;% # header + footers add_header_lines(values = &quot;Table: Demographics (Safety Analysis Set)&quot;) %&gt;% add_footer_lines(values = &quot;This was produced in R!&quot;) %&gt;% # font size, font name fontsize(part = &quot;all&quot;, size = 8) # font() # font(part = &quot;all&quot;, fontname = &quot;Times&quot;) # This errors, perhaps version issue. -- SZ .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-94e47fe0{}.cl-94dc9988{font-family:'DejaVu Sans';font-size:8pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-94dcaac2{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-94dcaacc{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-94dcaacd{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0.5pt;padding-top:0.5pt;padding-left:0.5pt;padding-right:0.5pt;line-height: 1;background-color:transparent;}.cl-94dcaad6{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0.5pt;padding-top:0.5pt;padding-left:0.5pt;padding-right:0.5pt;line-height: 1;background-color:transparent;}.cl-94dda1a2{width:288pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1ac{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1b6{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1b7{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1b8{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1c0{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1c1{width:288pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1ca{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1cb{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1cc{width:288pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1d4{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1d5{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1d6{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1de{width:288pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1df{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1e0{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1e8{width:288pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1e9{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1ea{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1f2{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1f3{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1f4{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1fc{width:288pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1fd{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda1fe{width:288pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda206{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda207{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda208{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda210{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda211{width:288pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda212{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda21a{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda21b{width:288pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda21c{width:99.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda224{width:176.1pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-94dda225{width:172.7pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Table: Demographics (Safety Analysis Set)Variable Xanomeline High DoseXanomeline Low DosePlaceboTotalAge (years)N848486254Mean [SD]74.38 [ 7.886]75.67 [ 8.286]75.21 [ 8.590]75.09 [ 8.246]Median76.077.576.077.0Min, Max56, 8851, 8852, 8951, 89Age Group 1 (years)&lt;65 11 [13.10%] 8 [ 9.52%] 14 [16.28%] 33 [12.99%]&gt;80 18 [21.43%] 29 [34.52%] 30 [34.88%] 77 [30.31%]65-80 55 [65.48%] 47 [55.95%] 42 [48.84%]144 [56.69%]GenderF 40 [47.62%] 50 [59.52%] 53 [61.63%]143 [56.30%]M 44 [52.38%] 34 [40.48%] 33 [38.37%]111 [43.70%]EthnicityHISPANIC OR LATINO 3 [ 3.57%] 6 [ 7.14%] 3 [ 3.49%] 12 [ 4.72%]NOT HISPANIC OR LATINO 81 [96.43%] 78 [92.86%] 83 [96.51%]242 [95.28%]Baseline Body Mass Index (kg/m2)N848486254Mean [SD]25.35 [ 4.158]25.06 [ 4.271]23.64 [ 3.672]24.67 [ 4.092]Median24.824.323.424.2Min, Max14, 3418, 4015, 3314, 40This was produced in R! "],["exporting.html", "5.3 Exporting", " 5.3 Exporting To export our table to MS Word (.docx), we may use the officer package. This package simplifies working with various Microsoft Office formats and integrates nicely with flextable. library(officer) # send the flextable to .docx output read_docx() %&gt;% body_add_flextable(my_flextable) %&gt;% print(target = &quot;my_document.docx&quot;) In your working directory, you should now see the file my_document.docx has been created and contains your table. "],["figures-plots.html", "Chapter 6 Figures &amp; Plots", " Chapter 6 Figures &amp; Plots In this section, basic useage of the ggplot2 package is covered. Common clinical trial displays are then created and customized in a step wise manner. ## Basics ### Building a plot using ggplot2 6.0.0.1 Packages and Sample Data # Packages library(haven) library(ggplot2) # Data adam_path &lt;- &quot;https://github.com/phuse-org/TestDataFactory/raw/main/Updated/TDF_ADaM/&quot; adsl &lt;- as.data.frame(haven::read_xpt(paste0(adam_path, &quot;adsl.xpt&quot;))) Let’s create a basic scatter plot of weight vs height. # basic scatter plot of weight vs height my_scatter_plot &lt;- ggplot(adsl, aes(x = HEIGHTBL, y = WEIGHTBL)) + geom_point() my_scatter_plot 6.0.1 Exporting plots You may export plots as png files a few ways. If your plot is created in ggplot2, you can use the ggsave() function to export as png: # save plot as a png file ggsave(plot = my_scatter_plot, filename = &quot;my_plot_output_1.png&quot;, width = 7, height = 5, units = &quot;in&quot;) The more general way to save plots as png files is to use the png() function. It can work with ggplot2, but also plots created in base R. png(filename = &quot;my_plot_output_2.png&quot;, width = 7, height = 5, units = &quot;in&quot;, res = 300) print(my_scatter_plot) dev.off() "],["examples.html", "6.1 Examples", " 6.1 Examples 6.1.1 Swimmer Plot For this example we use the swimplot package for plotting. It makes the creation of swimmer plots very easy and is based on ggplot2 and thus allows nice customizations. However, if even more customization is required, swimmer plots can also be created by using ggplot2 only. A little demo how you could use the package is given below, in case you would like to find out more, you can check out this. 6.1.1.1 Packages and Sample Data # Packages library(haven) library(swimplot) library(dplyr) # Data adam_path &lt;- &quot;https://github.com/phuse-org/TestDataFactory/raw/main/Updated/TDF_ADaM/&quot; adsl &lt;- haven::read_xpt(paste0(adam_path, &quot;adsl.xpt&quot;)) adae &lt;- haven::read_xpt(paste0(adam_path, &quot;adae.xpt&quot;)) adtte &lt;- haven::read_xpt(paste0(adam_path, &quot;adtte.xpt&quot;)) We have to apply some changes to the data so that they can be processed by the plot functions later on. The number of subjects is limited to 50 for display purposes and we create our own response duration variable because we only have the start date of the event given in those data. adsl_new &lt;- adsl %&gt;% select(USUBJID, ARM, TRTDURD, SEX) %&gt;% slice(1:50) adae_new &lt;- adae %&gt;% select(USUBJID, AEDECOD, AESEV, AEREL, ASTDY) %&gt;% filter(USUBJID %in% adsl_new$USUBJID &amp; ASTDY &gt;= 0) adtte_new &lt;- adtte %&gt;% select(USUBJID, EVNTDESC, AVAL) %&gt;% filter(USUBJID %in% adsl_new$USUBJID &amp; EVNTDESC != &quot;Study Completion Date&quot;) random_duration_of_events &lt;- sample(1:25, nrow(adtte_new), replace = T) adtte_new &lt;- adtte_new %&gt;% bind_cols(random_duration_of_events) %&gt;% mutate(Resp_end = AVAL + random_duration_of_events ) adsl_new &lt;- as.data.frame(adsl_new) adae_new &lt;- as.data.frame(adae_new) adtte_new &lt;- as.data.frame(adtte_new) 6.1.1.2 Basic swimmer plot A basic swimmer plot just consists of a simple bar chart. swimmer_plot(df=adsl_new, id=&#39;USUBJID&#39;, end=&#39;TRTDURD&#39;, fill=&#39;lightblue&#39;, width=.85) Now, treatment information is added. arm_plot &lt;- swimmer_plot(df=adsl_new, id=&#39;USUBJID&#39;, end=&#39;TRTDURD&#39;, name_fill=&#39;ARM&#39;, id_order=&#39;ARM&#39;, col=&quot;black&quot;, alpha=0.75, width=.8) arm_plot The plot could be stratified by any other variable of interest, in this case: SEX. swim_plot_stratify &lt;-swimmer_plot(df=adsl_new, id=&#39;USUBJID&#39;, end=&#39;TRTDURD&#39;, name_fill=&#39;ARM&#39;, col=&quot;black&quot;, alpha=0.75, width=.8, base_size=14, stratify= c(&#39;SEX&#39;)) swim_plot_stratify 6.1.1.3 Adding adverse event information to the plot AE_plot &lt;- arm_plot + swimmer_points(df_points=adae_new, id=&#39;USUBJID&#39;, time=&#39;ASTDY&#39;, name_shape=&#39;AESEV&#39;, size=2.5, fill=&#39;white&#39;, name_col=&#39;AEREL&#39;) AE_plot 6.1.1.4 Adding time-to-event information to the plot Response_plot &lt;- arm_plot + swimmer_lines(df_lines=adtte_new, id=&#39;USUBJID&#39;, start =&#39;AVAL&#39;, end=&#39;Resp_end&#39;, name_col=&#39;EVNTDESC&#39;, size=1) Response_plot 6.1.1.5 Customize plot Response_plot_with_points &lt;- Response_plot + swimmer_points_from_lines(df_lines=adtte_new, id=&#39;USUBJID&#39;, start=&#39;AVAL&#39;, end=&#39;Resp_end&#39;, name_col=&#39;EVNTDESC&#39;, size=2) + scale_fill_manual(name=&quot;Treatment&quot;, values=c(&quot;Placebo&quot; =&quot;#A9342F&quot;, &quot;Xanomeline High Dose&quot;=&quot;#5B7ACE&quot;, &quot;Xanomeline Low Dose&quot;=&#39;#FFC300&#39;))+ scale_color_manual(name=&quot;Response&quot;, values=c(&quot;grey20&quot;))+ scale_shape_manual(name=&#39;&#39;, values=c(17,15), breaks=c(&#39;AVAL&#39;,&#39;Resp_end&#39;), labels=c(&#39;Response start&#39;,&#39;Response end&#39;))+ guides(fill = guide_legend(override.aes = list(shape = NA))) + scale_y_continuous(name = &quot;Time since enrollment&quot;) Response_plot_with_points 6.1.2 Waterfall Plot 6.1.2.1 Packages and Sample Data # Packages library(gridExtra) library(grid) # Data wp &lt;- data.frame(subjidn = 1:30, trtp = sample(c(&#39;Drug&#39;,&#39;Placebo&#39;), replace = T, 30), aval = runif(30, min = -40, max = 40)) subjidn trtp aval 1 Drug 39.291594 2 Drug -22.230081 3 Placebo 28.688338 4 Placebo 32.369313 5 Drug -6.381791 6 Drug 27.306600 6.1.2.2 Basic Waterfall Plot Create an initial waterfall plot basic_waterfall &lt;- ggplot(wp, aes(y = aval,x = reorder(subjidn, -aval))) + geom_bar(stat = &quot;identity&quot;) basic_waterfall 6.1.2.3 Adding Customizations Add a few customizations to the waterfall plot Bar fill color is determined by trtp value Specify custom colors, name the legend Specify Y-axis goes from -40 to 40, by increments of 10 Add in a Y-axis label Specify a base theme Remove the X-axis Move legend to bottom of graph 6.1.2.4 Customized Waterfall Plot custom_waterfall &lt;- ggplot(wp, aes(y = aval, x = reorder(subjidn, -aval), fill = trtp)) + geom_bar(stat = &quot;identity&quot;) + scale_fill_manual(&quot;Planned Treatment Arm&quot;, values = c(&#39;#00bbff&#39;,&#39;#89d329&#39;)) + scale_y_continuous(limits = c(-40,40), breaks = seq(-40, 40, by = 10)) + ylab(&quot;Maximum reduction of tumor size (%)\\n&quot;) + theme_light() + theme(axis.title.x = element_blank(), axis.line.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), legend.position = &quot;bottom&quot;) custom_waterfall 6.1.2.5 Study Example A special waterfall plot layout is needed in a real study. In this layout, biomarker information in the subject level needs to be added at the bottom of the waterfall plots. The dataset for the plot was derived from ADRS and ADSL in SAS; simulated data is used in this demo. Simulate Data: set.seed(100) n &lt;- 120 # size/records of simulated data dat_all &lt;- data.frame(SUBJID = 120010100:(120010100+n-1), AVAL = c(rnorm(round(0.8*n), 0, 20), rep(0, round(0.2*n))) %&gt;% sample(), OVERALLRESP = c(&quot;PR&quot;, &quot;SD&quot;,&quot;PD&quot;) %&gt;% sample(size=n, replace=TRUE), AMEDGRPN = seq(10, 50, 10) %&gt;% sample(size=n, replace=TRUE), DOR = rpois(n, 40), AVISIT = c(&quot;C1&quot;, &quot;C2&quot;, &quot;C3&quot;,&quot;EOT&quot;) %&gt;% sample(size=n, replace=TRUE), ATMLOSS_L = c(&quot;E&quot;, &quot;L&quot;, &quot;Data unavailable&quot;) %&gt;% sample(size=n, replace=TRUE), ATMLOSS_P = c(&quot;E&quot;, &quot;L&quot;, &quot;Data unavailable&quot;) %&gt;% sample(size=n, replace=TRUE), ATMLOSS_R = c(&quot;E&quot;, &quot;L&quot;, &quot;Data unavailable&quot;) %&gt;% sample(size=n, replace=TRUE), IDFOOT = &quot;Bayer: /study/path/.../f_waterfall.sas 30NOV2021 16:06&quot; ) %&gt;% mutate_at(vars(&quot;OVERALLRESP&quot;, &quot;DOR&quot;, &quot;IDFOOT&quot;), as.character) X: SUBJID Y: AVAL (derived from ADRS.AVAL when ADRS.PARAM = “Maximum Tumor Reduction (%)”) Label: OVERALLRESP (derived from ADRS.AVAL when ADRS.PARAM = “Best Overall Response”) Subset: AMEDGRPN (5 groups) A graph function is created in the real study for different analysis groups, in this demo, we subset data to AMEDGRPN = 50. SUBJID AVAL OVERALLRESP AMEDGRPN DOR AVISIT ATMLOSS_L ATMLOSS_P ATMLOSS_R 120010100 28.56603 SD 50 31 EOT Data unavailable E L 120010120 35.14751 PD 50 36 C3 Data unavailable E Data unavailable 120010121 -23.24839 PD 50 37 EOT E Data unavailable Data unavailable 120010128 46.20594 PR 50 44 C2 Data unavailable E E 120010134 0.00000 PD 50 58 C3 Data unavailable Data unavailable E 120010135 -45.43851 PR 50 31 C2 Data unavailable L L Create a waterfall plot with simulated data and below customization Add x/y-axis labels through function “labs” SUBJID has long digits, below functions are used to avoid overlapping at x-axis: function stringr::str_wrap: add split character “” between digits function gsub: add space between digits to enable the use of str_wrap function stringr::str_replace_all: remove space Specify legend title, order/colors (similar to SAS sgplot - dattrmap) Annotation on the top of the bar when Y=0 Adjust background, legend, and size/color/font of x/y-axis aesthetics through Theme waterfall.plot &lt;- dat %&gt;% ggplot(aes(reorder(SUBJID, -AVAL), AVAL, fill =OVERALLRESP)) + geom_bar(stat=&quot;identity&quot;) + labs(x = &quot;Subject&quot;, y = &quot;Best % Change from baseline \\n in sum of diameters \\n (target lesions)\\n&quot;) + scale_x_discrete(labels = function(x) stringr::str_wrap(gsub(&quot;([0-9])([0-9])&quot;, &quot;\\\\1 \\\\2 &quot;, x), width = 5) %&gt;% stringr::str_replace_all(&quot; &quot;, &quot;&quot;)) + scale_fill_manual(&quot;Best Response&quot;, breaks = c(&quot;PR&quot;, &quot;SD&quot;,&quot;PD&quot;), values=c(&quot;PR&quot;=&#39;#89d329&#39;, &quot;SD&quot;=&quot;#756bb1&quot;, &quot;PD&quot;=&#39;#00bbff&#39;)) + geom_text(aes(label = if_else(AVAL == 0,OVERALLRESP,&quot;&quot;),fontface=&quot;bold&quot;), vjust = -1, size=3, color=&quot;black&quot;) + theme_bw() + theme( axis.text = element_text(size=12,color=&quot;black&quot;,face = &quot;bold&quot;), axis.title.y = element_text(size=12, face=&quot;bold&quot;), axis.title.x = element_blank(), legend.background = element_rect(color = &quot;steelblue&quot;, linetype = &quot;solid&quot;), legend.justification = c(1, 1), legend.position = c(1, 1), legend.direction = &quot;horizontal&quot;, legend.text = element_text(size=8, color = &quot;black&quot;, face = &quot;bold&quot;), legend.title = element_text(size=8, color = &quot;black&quot;, face = &quot;bold&quot;), plot.caption = element_text(hjust = 0, size = 10, color = &quot;blue&quot;), plot.caption.position = &quot;plot&quot; ) waterfall.plot As requested from the study, more information at subject level needs to be added in the bottom of the waterfall plots. Thus, two more plots are created (add-in plot1/2) to display the subject level information. Add-in plot 1: visit and duration of response information at subject level var &lt;- c(&quot;DOR&quot;, &quot;AVISIT&quot;) var_label &lt;- c(&quot;Duration (days)&quot;, &quot;Timepoint&quot;) add.plot1 &lt;- dat %&gt;% reshape2::melt(measure.vars = eval(var), value.name = &quot;label&quot;, variable.name = &quot;layer&quot;) %&gt;% mutate(layer = factor(layer, levels = var, labels = var_label)) %&gt;% ggplot(aes(reorder(SUBJID, -AVAL))) + geom_text(aes(y = layer, label = label), size = 3, fontface = &quot;bold&quot;) + labs(y = &quot;&quot;, x = NULL) + theme_minimal() + theme( axis.text.y = element_text( size = 10, colour = &quot;black&quot;, face = &quot;bold&quot; ), axis.line = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), panel.grid = element_blank(), strip.text = element_blank() ) + coord_fixed(ratio = .8) add.plot1 Add-in plot 2: biomarker-related information at subject level, footnotes are added in this plot wrap long footnote by adding \"\\n\" or using stringr::str_wrap display SAS macro variable “&amp;idfoot.” Footnotes: footnote1 &lt;- &#39;Footnote1: &quot;\\\\n\\&quot; can be used to split long footnote into next line.&#39; footnote2 &lt;- &quot;Footnote2: To avoid manually adding split character. The function stringr::str_wrap can be used here to wrap the long text with a specified width.&quot; footnote &lt;- lapply(c(footnote1, footnote2, &quot;&quot;, dat$IDFOOT[1]), function(x) stringr::str_wrap(x, width=120)) %&gt;% # apply str_wrap to individual footnote unlist() %&gt;% # convert list structure to vector stringr::str_flatten(&#39;\\n&#39;) # add split character(new line) between footnotes var &lt;- c(&quot;ATMLOSS_L&quot;, &quot;ATMLOSS_P&quot;,&quot;ATMLOSS_R&quot;) var_label &lt;- c(&quot;Local&quot;, &quot;Prospective&quot;, &quot;Retrospective&quot;) add.plot2 &lt;- dat %&gt;% reshape2::melt(measure.vars = eval(var), value.name = &quot;label&quot;, variable.name = &quot;layer&quot;) %&gt;% mutate(label=case_when( label == &quot;L&quot; ~ &quot;ATM Loss&quot;, label == &quot;E&quot; ~ &quot;ATM Expressed&quot;, label == &quot;9&quot; ~ &quot;Data unavailable&quot;, TRUE ~ label )) %&gt;% mutate(layer = factor(layer, levels = rev(var), labels = rev(var_label))) %&gt;% ggplot() + aes(reorder(SUBJID, -AVAL), layer, color=label,shape=label) + geom_point(size=3)+ scale_shape_manual(breaks = c(&quot;ATM Loss&quot;,&quot;ATM Expressed&quot;, &quot;Data unavailable&quot;), values = c(&quot;ATM Loss&quot;=15,&quot;ATM Expressed&quot;=0, &quot;Data unavailable&quot;=7))+ scale_color_manual(values = c(&quot;ATM Loss&quot;=&quot;black&quot;, &quot;ATM Expressed&quot;=&quot;black&quot;, &quot;Data unavailable&quot;= &#39;black&#39;))+ theme_classic()+ theme(axis.text=element_text(size=10, colour = &quot;black&quot;,face = &quot;bold&quot;), axis.title=element_blank(), axis.line = element_blank(), axis.ticks = element_blank(), axis.text.x = element_blank(), legend.title = element_blank(), legend.text = element_text(size=10, color = &quot;black&quot;, face = &quot;bold&quot;), legend.position = &quot;bottom&quot;, panel.border = element_blank(), panel.grid = element_blank(), strip.text = element_blank(), plot.caption = element_text(hjust = 0, size = 10), plot.caption.position = &quot;plot&quot; )+ coord_fixed(ratio=.9)+ labs(caption = footnote) add.plot2 The following functions are used to combine three plots aligned with x value. ggplot2::ggplotGrob gridExtra::gtable_rbind grid::grid.draw Align the three plots with the same x-axis (SUBJID). waterfall.plot add.plot1 add.plot2 p1 &lt;- waterfall.plot %&gt;% ggplotGrob() p2 &lt;- add.plot1 %&gt;% ggplotGrob() p3 &lt;- add.plot2 %&gt;% ggplotGrob() gtable_rbind(p1, p2, p3, size=&#39;first&#39;) %&gt;% grid.draw() 6.1.3 Spaghetti Plot 6.1.3.1 Packages and Sample Data # Packages library(gg.gap) # Data set.seed(100) n &lt;- 50 # number of subjects, each subject has 12 data points spaghetti_sim &lt;- data.frame(SUBJIDN = rep(1:n,each=12), X = rep(1:12,n), Y = c(rgamma((n*12-5), 5, 1), rnorm(5, 200,40)) %&gt;% sample(), TRT01AN = c(&quot;Drug&quot;,&quot;Placebo&quot;) %&gt;% sample(size=n*12, replace=TRUE)) SUBJIDN X Y TRT01AN 1 1 6.998788 Placebo 1 2 5.381833 Drug 1 3 8.597700 Drug 1 4 5.774989 Drug 1 5 5.275945 Drug 1 6 2.945667 Drug 6.1.3.2 Basic Spaghetti plot p_spaghetti &lt;- spaghetti_sim %&gt;% ggplot(aes(X, Y, group = SUBJIDN, colour = TRT01AN)) + geom_point() + geom_line(size = 0.3) + theme_bw() + labs(y=&quot;Y values&quot;, x=&quot;Months since start of study treatment&quot;, colour = &quot;Actual Treatment for Period 01 (N)&quot;) + theme(legend.background = element_rect(size=0.1, linetype=&quot;solid&quot;, colour =&quot;black&quot;), legend.position=&quot;bottom&quot;, legend.box = &quot;horizontal&quot;) p_spaghetti 6.1.3.3 Spaghetti Plot with Broken Y Different scales presented in the same plot when outliers are presented, to enlarge the detailed part of small values. #library(gg.gap) p_spaghetti_break &lt;- gg.gap(plot=p_spaghetti, tick_width=c(1,70), segments=c(15,25), rel_heights=c(8,0,1), ylim=c(0,235)) p_spaghetti_break 6.1.4 Spider Plot 6.1.4.1 Packages and Sample Data Create a sample data set to visualize # Packages library(ggrepel) # Data sp &lt;- data.frame(subjidn = rep(1:5, times = c(5,4,5,3,4)), trtp = rep(c(&#39;drug&#39;,&#39;placebo&#39;), times = c(8,13)), avisit = c(0:4,0:3, 0:4, 0:2, 0:3), aval = c(0,5,15,20,20, 0,-10,-20,-15, 0,-30,-25,-35,-30, 0,15,30, 0,-20,-15,-20)) subjidn trtp avisit aval 1 drug 0 0 1 drug 1 5 1 drug 2 15 1 drug 3 20 1 drug 4 20 6.1.4.2 Basic Spider Plot basic_spider &lt;- ggplot(sp, aes(x = avisit, y = aval, group = subjidn)) + geom_line() basic_spider 6.1.4.3 Adding Customizations Add a few customizations to the spider plot Line color is determined by trtp value Add points to each line Add a dashed reference line at Y = 0 Specify custom colors, name the legend Specify Y-axis goes from -40 to 40, by increments of 10 Add in a Y-axis label Add in a X-axis label Specify a base theme Move legend to bottom of graph 6.1.4.4 Customized Spider Plot custom_spider &lt;- ggplot(sp, aes(x = avisit, y = aval, group = subjidn, color = trtp)) + geom_line() + geom_point() + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;) + scale_color_manual(&quot;Planned Treatment Arm&quot;, values = c(&#39;#00bbff&#39;,&#39;#89d329&#39;)) + scale_y_continuous(limits = c(-40,40), breaks = seq(-40, 40, by = 10)) + ylab(&quot;Change in Target Lesion from Baseline (%)\\n&quot;) + xlab(&quot;Time (weeks)&quot;) + theme_light() + theme(legend.position = &quot;bottom&quot;) custom_spider 6.1.4.5 Subject Labels Customization Add subject Labels (IDs) at the end of each line sp_ends &lt;- sp %&gt;% group_by(subjidn) %&gt;% top_n(1, avisit) subjidn trtp avisit aval 1 drug 4 20 2 placebo 3 -15 3 placebo 4 -30 4 placebo 2 30 5 placebo 3 -20 # library(ggrepel) custom_spider + geom_text_repel( aes(label = subjidn), color=&quot;black&quot;, data=sp_ends, size = 3, direction = &quot;x&quot;, hjust = 1 ) 6.1.5 Survival Plot 6.1.5.1 Kaplan-Meier statistics and plotting In the following example the survfit function from the survival package is used to calculate Kaplan-Meier statistics from time-to-event data. The model statistics can be inspected (using broom - a generic function to extract statistics from R models). Passing the model to the ggsurvplot function from the survminer package creates a Kaplan-Meier curve. The configuration tries to mimic the known SAS output as close as possible (e.g. number at risk table style etc.). 6.1.5.2 Packages and Sample Data # Packages library(survminer) library(survival) library(broom) library(flextable) # Data adtte &lt;- haven::read_xpt( paste0(&quot;https://github.com/phuse-org/TestDataFactory/&quot;, &quot;raw/main/Updated/TDF_ADaM/adtte.xpt&quot;)) Filter time-to-event parameter and select required variables. The piping command directly passed filtered and selected data to the survfit function and creates the model. Note: The event parameter from survival function (survival::Surv) is the status indicator, normally 0=alive, 1=death; while ADTTE.CNSR=0 usually means event occurred(e.g., death), ADTTE.CNSR=1 represents censoring. Thus, “1-CNSR” is used here to accommodate the CDISC ADaM standard. This section is under construction surv_model &lt;- adtte %&gt;% filter(PARAMCD == &quot;TTDE&quot;) %&gt;% select(STUDYID, USUBJID, PARAMCD, AVAL, CNSR, TRTA) %&gt;% survfit(Surv(AVAL, 1-CNSR) ~ TRTA, data = .) 6.1.5.3 Inspecting fitted survival model head(tidy(surv_model)) time n.risk n.event n.censor estimate std.error conf.high conf.low strata 1 86 1 0 0.9883721 0.0116961 1.0000000 0.9659724 TRTA=Placebo 2 85 1 0 0.9767442 0.0166390 1.0000000 0.9454046 TRTA=Placebo 3 84 2 0 0.9534884 0.0238163 0.9990514 0.9100033 TRTA=Placebo 7 82 1 0 0.9418605 0.0267913 0.9926390 0.8936795 TRTA=Placebo 8 81 0 1 0.9418605 0.0267913 0.9926390 0.8936795 TRTA=Placebo 9 80 1 0 0.9300872 0.0295973 0.9856369 0.8776683 TRTA=Placebo 6.1.5.4 Plotting custom configured Kaplan-Meier curves without confidence intervals Note: Let´s assume a month is defined as 30.4375 (days); The xscale parameter d_m converts days (input) to month. If six months breaks are required for the numbers-at-risk table this would mean: break.x.by = 182.625 (6*30.4375). ggsurvplot( fit = surv_model, data = adtte, risk.table = TRUE, #ylab = ylabs, xlab = &quot;Months&quot;, linetype = &quot;strata&quot;, conf.int = F, legend.title = &quot;Randomized Treatment&quot;, legend = c(0.1, 0.1), #palette = c(color_trt1,color_trt2), risk.table.title = &quot;Number of subjects at risk&quot;, risk.table.y.text = F, risk.table.height = .15, censor.shape = 1, censor.size = 3, ncensor.plot = F, xlim = c(0,250), xscale = &quot;d_m&quot;, break.x.by = 30.4375, break.y.by = .1, ggtheme = theme_survminer( font.main = c(10, &quot;bold&quot;), font.submain = c(10, &quot;bold&quot;), font.x = c(12, &quot;bold&quot;), font.y = c(12, &quot;bold&quot;), ) + theme(panel.border = element_rect(fill = NA)), tables.theme = theme_cleantable() ) 6.1.5.5 Plotting custom configured Kaplan-Meier curves with confidence intervals ggsurvplot( fit = surv_model, data = adtte, risk.table = TRUE, #ylab = ylabs, xlab = &quot;Months&quot;, linetype = &quot;strata&quot;, conf.int = T, legend.title = &quot;Randomized Treatment&quot;, legend = c(0.1, 0.1), #palette = c(color_trt1,color_trt2), risk.table.title = &quot;Number of subjects at risk&quot;, risk.table.y.text = F, risk.table.height = .15, censor.shape = 1, censor.size = 3, ncensor.plot = F, #xlim = c(0,250), xscale = &quot;d_m&quot;, break.x.by = 30.4375, break.y.by = .1, ggtheme = theme_survminer( font.main = c(10, &quot;bold&quot;), font.submain = c(10, &quot;bold&quot;), font.x = c(12, &quot;bold&quot;), font.y = c(12, &quot;bold&quot;), ) + theme(panel.border = element_rect(fill = NA)), tables.theme = theme_cleantable() ) "],["future.html", "Chapter 7 Future", " Chapter 7 Future This section contains ideas for future content. Your collaboration is welcome. "],["use-renv.html", "7.1 Use {renv}", " 7.1 Use {renv} {renv} ensures consistent package version for collaborating on this document. Right after you pull this repository, run renv::restore() to rehydrate your local project with necessary dependencies. Current package versions in the renv lockfile: ## name version ## 1 KMsurv 0.1-5 ## 2 MASS 7.3-51.5 ## 3 Matrix 1.2-18 ## 4 MatrixModels 0.5-0 ## 5 R6 2.5.1 ## 6 RColorBrewer 1.1-3 ## 7 RCurl 1.98-1.6 ## 8 Rcpp 1.0.8.3 ## 9 RcppEigen 0.3.3.9.2 ## 10 SparseM 1.81 ## 11 Tplyr 0.4.4 ## 12 abind 1.4-5 ## 13 askpass 1.1 ## 14 assertthat 0.2.1 ## 15 backports 1.4.1 ## 16 base64enc 0.1-3 ## 17 bit 4.0.4 ## 18 bit64 4.0.5 ## 19 bitops 1.0-7 ## 20 bookdown 0.26 ## 21 boot 1.3-24 ## 22 brio 1.1.3 ## 23 broom 0.8.0 ## 24 bslib 0.3.1 ## 25 callr 3.7.0 ## 26 car 3.0-13 ## 27 carData 3.0-5 ## 28 cli 3.3.0 ## 29 clipr 0.8.0 ## 30 colorspace 2.0-3 ## 31 corrplot 0.92 ## 32 cowplot 1.1.1 ## 33 cpp11 0.4.2 ## 34 crayon 1.5.1 ## 35 curl 4.3.2 ## 36 data.table 1.14.2 ## 37 desc 1.4.1 ## 38 diffobj 0.3.5 ## 39 digest 0.6.29 ## 40 dplyr 1.0.9 ## 41 ellipsis 0.3.2 ## 42 evaluate 0.15 ## 43 exactRankTests 0.8-35 ## 44 fansi 1.0.3 ## 45 farver 2.1.0 ## 46 fastmap 1.1.0 ## 47 flextable 0.7.1 ## 48 forcats 0.5.1 ## 49 foreign 0.8-78 ## 50 fs 1.5.2 ## 51 gdtools 0.2.4 ## 52 generics 0.1.2 ## 53 gg.gap 1.3 ## 54 ggplot2 3.3.6 ## 55 ggpubr 0.4.0 ## 56 ggrepel 0.9.1 ## 57 ggsci 2.9 ## 58 ggsignif 0.6.3 ## 59 ggtext 0.1.1 ## 60 glue 1.6.2 ## 61 gridExtra 2.3 ## 62 gridtext 0.1.4 ## 63 gtable 0.3.0 ## 64 haven 2.5.0 ## 65 highr 0.9 ## 66 hms 1.1.1 ## 67 htmltools 0.5.2 ## 68 httr 1.4.3 ## 69 isoband 0.2.5 ## 70 jpeg 0.1-9 ## 71 jquerylib 0.1.4 ## 72 jsonlite 1.8.0 ## 73 kableExtra 1.3.4 ## 74 km.ci 0.5-6 ## 75 knitr 1.39 ## 76 labeling 0.4.2 ## 77 lattice 0.20-45 ## 78 lifecycle 1.0.1 ## 79 lme4 1.1-29 ## 80 magrittr 2.0.3 ## 81 maptools 1.1-4 ## 82 markdown 1.1 ## 83 maxstat 0.7-25 ## 84 mgcv 1.8-31 ## 85 mime 0.12 ## 86 minqa 1.2.4 ## 87 munsell 0.5.0 ## 88 mvtnorm 1.1-3 ## 89 nlme 3.1-147 ## 90 nloptr 2.0.3 ## 91 nnet 7.3-13 ## 92 numDeriv 2016.8-1.1 ## 93 officer 0.4.2 ## 94 openssl 2.0.2 ## 95 pbkrtest 0.5.1 ## 96 pillar 1.7.0 ## 97 pkgconfig 2.0.3 ## 98 pkgload 1.2.4 ## 99 plyr 1.8.7 ## 100 png 0.1-7 ## 101 polynom 1.4-1 ## 102 praise 1.0.0 ## 103 prettyunits 1.1.1 ## 104 processx 3.5.3 ## 105 progress 1.2.2 ## 106 ps 1.7.0 ## 107 purrr 0.3.4 ## 108 quantreg 5.93 ## 109 rappdirs 0.3.3 ## 110 readr 2.1.2 ## 111 rematch2 2.1.2 ## 112 renv 0.15.5 ## 113 reshape2 1.4.4 ## 114 rlang 1.0.2 ## 115 rmarkdown 2.14 ## 116 rprojroot 2.0.3 ## 117 rstatix 0.7.0 ## 118 rstudioapi 0.13 ## 119 rvest 1.0.2 ## 120 sass 0.4.1 ## 121 scales 1.2.0 ## 122 selectr 0.4-2 ## 123 sp 1.4-7 ## 124 stringi 1.7.6 ## 125 stringr 1.4.0 ## 126 survMisc 0.5.6 ## 127 survival 3.1-12 ## 128 survminer 0.4.9 ## 129 svglite 2.1.0 ## 130 swimplot 1.2.0 ## 131 sys 3.4 ## 132 systemfonts 1.0.4 ## 133 testthat 3.1.4 ## 134 tibble 3.1.7 ## 135 tidyr 1.2.0 ## 136 tidyselect 1.1.2 ## 137 tinytex 0.39 ## 138 tzdb 0.3.0 ## 139 utf8 1.2.2 ## 140 uuid 1.1-0 ## 141 vctrs 0.4.1 ## 142 viridisLite 0.4.0 ## 143 vroom 1.5.7 ## 144 waldo 0.4.0 ## 145 webshot 0.5.3 ## 146 withr 2.5.0 ## 147 xfun 0.31 ## 148 xml2 1.3.3 ## 149 xtable 1.8-4 ## 150 yaml 2.3.5 ## 151 zip 2.2.0 ## 152 zoo 1.8-10 If you think a package should be updated or newly included, reflect this information in renv.lock through renv::snapshot() and include it in your pull request. "],["areas-of-expansion.html", "7.2 Areas of Expansion", " 7.2 Areas of Expansion ADaM derivation with {admiral} and/or {dplyr} define.xml "],["content.html", "7.3 Content", " 7.3 Content Working with dates in R Data exportation More examples using Pharmaverse-based packages as they mature "],["license.html", "Chapter 8 License", " Chapter 8 License Click to Expand Terms of Use The MIT License (MIT) Copyright © 2022 Bayer AG Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
